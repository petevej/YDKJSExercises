Chapter 3: Function vs. Block Scope

function foo(a) {
	var b = a;
	return a + b;
}

var c = foo( 2 );

Engine: Yo, scope, I have a LHS reference for c, ever heard of it?

Scope: Bro, nah this is the first time, let me declare it.

Engine: Thanks. Hey Scope, I have a RHS reference for foo. Ever heard of it?

Scope: Yeaaaah. Compiler just declared it a moment ago.

Engine: Scope, I have a RHS reference to a, have you heard of it?

Scope: Sure, here you go!

Engine: Cool beans. Scope, I have a LHS reference for b. Ever heard of it?

Scope: Bro, nah this is the first time, let me declare it.

Engine: Thanks. Passing the value of a which is 2 (LHS implicit param assignment)  to variable b. 

Note that when RHS look-up fails to find a variable anywhere in the nested Scopes, the Engine will throw a ReferenceError. In contrast, if Engine is performaing a LHS look-up and worked up to the Global Scope without finding it, if the program is not running in Strict Mode, then the global Scope will create a new variable of that name and hand it back to Engine.

RHS = Pull (retrieve value)
LHS = Push (assign value)

If a variable is found for a RHS look-up but you try to execute an impossible operation with it, then the Engine will throw a TypeError.

Lexical scope = scope that is defined by author-time decisions where functions are declared. It is created by the process of lexing, allowing prediction of how identifiers will be looked-up during execution

eval(..) = [cheat that will kill your speed] allows modification of existing lexical scope by evaluating a string of code which has one or more declarations in it.

with = creates a whole new lexical scope by treating an object reference as a "scope" and that object's properties as scoped identifiers.

**eval(..) and with are BAD**

Principle of Least Privilege

You should expose only what is minimally necessary, and "hide" everything else

Good example:

function doSomething(a) {
	function doSomethingElse(a) {
		return a - 1;
	}
	var b;

	b = a + doSomethingElse( a * 2 );
	console.log( b * 3 );
}

doSomething( 2 ); // 15

Bad example:

function doSomething(a) {
	b = a + doSomethingElse( a * 2 );
	console.log( b * 3 );
}

function doSomethingElse(a) {
	return a - 1;
}

var b;

doSomething( 2 ); // 15

Function Declaration vs Function Expression

If "function" leads the statement, it's a declaration, otherwise it's an expression

Example of function expression:

var a = 2;

(function foo() {
	var a = 3;
	console.log( a ); // 3
})();

console.log( a ); // 2

Hiding the identifier "foo" inside the scope of the function expression avoids polluting enclosing scope unnecessarily

Anonymous vs. Named

Leaving the function anonymous presents several risks: (difficult to debug, recursion not possible, difficult to understand code). 

It is often better to use inline function expressions e.g.

setTimeout( function timeoutHandler(){ // <-- Look, I have a name!
	console.log( "I waited 1 second!" );
}, 1000 );

Invoking Function Expressions Immediately

The first pair of () wraps around a function, making it an expression, the second pair of () executes the function:

var a = 2;

(function foo() {
	
	var a = 3;
	console.log( a ); // 3
})();

console.log( a ); // 2

IIFE - Immediately Invoked Function Expression

var a = 2;
(function IIFE(){

	var a = 3;
	console.log( a ); // 3
})();

console.log( a ); //2

Blocks As Scopes - Principle of Least Exposure

It's all bout declaring variables as close as possbile, as local as possible, to where they will be used. e.g.:

for (var i=0; i<10; i++) {   // i is declared right in the for loop head, only to be used there
	console.log( i );
}

The Rise of let

ES6 introduces a new keyword to allow variable declaration alongside var. It attaches the variable declaration to the scope of the enclosing block {..}. This allows for explicit block-scoping style:

var foo = true;

if (foo) {
	{ // <-- explicit block
		let bar = foo * 2;
		bar = something( bar );
		console.log( bar );
	}
}

console.log( bar ); // ReferenceError

The main benefit of block-scoping is that it makes refactoring a lot easier when you have to move certain blocks around

let also allows garbage collection for the case where a large momemory-heavy data needs to be garbage collected, e.g.:

function process(data) {
	// do something interesting
}
// anthing declared inside this block can go away after!
{
	let someReallyBigData = {...};
	
	process( someReallyBigData );
}
var btn = document.getElementById( "my_button" );

btn.addEventListener( "click", function click(evt) {
	console.log("button clicked");
}, /*capturingPhase=*/false );

let is also great for the for loop as it re-binds the counter (e.g. i) to each iteration of the loop.

for (let i=0; i<10; i++) {
	console.log( i );
}
console.log( i ); // ReferenceError as i is not defined in the outer scope

runs like this:

{
	let j;
	for (j=0; j<10; j++) {
		let i = j;  // re-bound for each iteration!
		console.log( i );
	}
}

Caution: block-scoping with let can be dangerous when a nested block is dependent upon that variable and it gets refactored outside later, e.g.:

var foo = true, baz = 10;

if (foo) {
	let bar = 3;
	if (baz > bar) {  // <-- don't forget 'bar' when moving!
		console.log( baz );
	}
}
// bar needs to be declared again outside!

New additin of const in ES6

const also creates a fixed block-scoped variable, any attempt to overwrite it will throw an error

var foo = true;

if (foo) {
	var a = 2;
	const b = 3;  // block-scoped ot the containing 'if'
	
	a = 3;  // just fine!
	b = 4; // this will throw an error!
}

console.log( a ); // 3
console.log( b ); // ReferenceError!


